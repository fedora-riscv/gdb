From FEDORA_PATCHES Mon Sep 17 00:00:00 2001
From: Fedora GDB patches <invalid@email.com>
Date: Fri, 27 Oct 2017 21:07:50 +0200
Subject: Expand watchpoint lengths to LONGEST

FileName: gdb-rhbz795424-bitpos-22of25.patch

;; Fix `GDB cannot access struct member whose offset is larger than 256MB'
;; (RH BZ 795424).
;;=push

http://sourceware.org/ml/gdb-patches/2012-09/msg00629.html

--MP_/6HRlH6vpyqtSy4CYyMrX6b2
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

Hi,

This is part three of the bitpos expansion change.  Some architectures
allow arbitrary length watchpoints and combined with the fact that type
lengths could be large enough, we need LONGEST for watchpoint lengths.
It is architecture dependent however, whether the LONGEST is needed or
not.  This patch updates the signatures of watchpoint insertion and
removal functions of all architectures (to comply with the function
signatures in the callback struct), but expands types only in
architectures that need it.  Tested on Fedora 16 x86_64.

Regards,
Siddhesh
--MP_/6HRlH6vpyqtSy4CYyMrX6b2
Content-Type: text/plain
Content-Transfer-Encoding: quoted-printable
Content-Disposition: attachment; filename=ChangeLog-wp

gdb/ChangeLog:

	* arm-linux-nat.c (arm_linux_insert_watchpoint): Expand
	parameter LEN to LONGEST.
	(arm_linux_remove_watchpoint): Likewise.
	(arm_linux_watchpoint_addr_within_range): Expand parameter
	LENGTH to LONGEST.
	* i386-nat.c (i386_insert_watchpoint): Expand parameter LEN to
	LONGEST.
	(i386_remove_watchpoint): Likewise.
	* ia64-linux-nat.c (ia64_linux_insert_watchpoint): Likewise.
	(ia64_linux_remove_watchpoint): Likewise.
	* inf-ttrace.c (inf_ttrace_insert_watchpoint): Likewise.
	Expand NUM_PAGES, PAGE to LONGEST.
	(inf_ttrace_remove_watchpoint): Likewise.
	* mips-linux-nat.c (mips_linux_insert_watchpoint): Expand
	parameter LEN to LONGEST.
	(mips_linux_remove_watchpoint): Likewise.
	* nto-procfs.c (procfs_remove_hw_watchpoint): Likewise.
	(procfs_insert_hw_watchpoint): Likewise.
	* ppc-linux-nat.c (calculate_dvc): Likewise.  Expand I,
	NUM_BYTE_ENABLE to LONGEST.
	(check_condition): Expand parameter LEN to point to LONGEST.
	(ppc_linux_can_accel_watchpoint_condition): Expand parameter
	LEN to LONGEST.
	(create_watchpoint_request): Likewise.
	(ppc_linux_insert_watchpoint): Likewise.
	(ppc_linux_remove_watchpoint): Likewise.
	(ppc_linux_watchpoint_addr_within_range): Expand parameter
	LENGTH to LONGEST.
	* procfs.c (proc_set_watchpoint): Expand parameter LEN to
	LONGEST.
	(procfs_set_watchpoint): Likewise.
	(procfs_insert_watchpoint): Likewise.
	(procfs_remove_watchpoint): Likewise.
	* remote-m32r-sdi.c (m32r_insert_watchpoint): Likewise.  Use
	plongest to format print LEN.
	(m32r_remove_watchpoint): Likewise.
	* remote-mips.c (mips_insert_watchpoint): Expand parameter LEN
	to LONGEST.
	(mips_remove_watchpoint): Likewise.
	* remote.c (remote_insert_watchpoint): Likewise.
	Use phex_nz to format print LEN.
	(remote_remove_watchpoint): Likewise.
	(remote_watchpoint_addr_within_range): Expand parameter LENGTH
	to LONGEST.
	* s390-linux-nat.c (s390_insert_watchpoint): Expand parameter LEN to
	LONGEST.
	(s390_remove_watchpoint): Likewise.
	* target.c (update_current_target): Expand parameter LEN for
	callbacks to TO_INSERT_WATCHPOINT, TO_REMOVE_WATCHPOINT,
	TO_CAN_ACCEL_WATCHPOINT_CONDITION, to LONGEST.
	(default_watchpoint_addr_within_range): Expand parameter
	LENGTH to LONGEST.
	(debug_to_can_accel_watchpoint_condition): Expand parameter LEN
	to LONGEST.  Use plongest to format print LEN.
	(debug_to_watchpoint_addr_within_range): Expand parameter LENGTH
	to LONGEST.  Use plongest to format print LENGTH.
	(debug_to_insert_watchpoint): Expand parameter LEN to LONGEST.
	Use plongest to format print LEN.
	(debug_to_remove_watchpoint): Likewise.
	* target.h (struct target_ops): Expand parameter LEN of
	TO_REMOVE_WATCHPOINT, TO_INSERT_WATCHPOINT,
	TO_WATCHPOINT_ADDR_WITHIN_RANGE and
	TO_CAN_ACCEL_WATCHPOINT_CONDITION to LONGEST.

--MP_/6HRlH6vpyqtSy4CYyMrX6b2
Content-Type: text/x-patch
Content-Transfer-Encoding: 7bit
Content-Disposition: attachment; filename=bitpos-wp.patch
---
 gdb/aarch64-linux-nat.c          |  2 +-
 gdb/arm-linux-nat.c              |  2 +-
 gdb/nat/aarch64-linux-hw-point.c | 21 +++++++++++----------
 gdb/nat/aarch64-linux-hw-point.h |  4 ++--
 gdb/ppc-linux-nat.c              | 14 +++++++-------
 gdb/procfs.c                     |  4 ++--
 gdb/remote.c                     |  6 +++---
 gdb/target-delegates.c           | 14 +++++++-------
 gdb/target.c                     |  4 ++--
 gdb/target.h                     |  4 ++--
 10 files changed, 38 insertions(+), 37 deletions(-)

Index: gdb-8.1/gdb/aarch64-linux-nat.c
===================================================================
--- gdb-8.1.orig/gdb/aarch64-linux-nat.c	2018-05-05 17:58:31.061496741 +0200
+++ gdb-8.1/gdb/aarch64-linux-nat.c	2018-05-05 17:58:32.449509313 +0200
@@ -789,7 +789,7 @@
 static int
 aarch64_linux_watchpoint_addr_within_range (struct target_ops *target,
 					    CORE_ADDR addr,
-					    CORE_ADDR start, int length)
+					    CORE_ADDR start, LONGEST length)
 {
   return start <= addr && start + length - 1 >= addr;
 }
Index: gdb-8.1/gdb/arm-linux-nat.c
===================================================================
--- gdb-8.1.orig/gdb/arm-linux-nat.c	2018-05-05 17:58:31.062496750 +0200
+++ gdb-8.1/gdb/arm-linux-nat.c	2018-05-05 17:58:32.449509313 +0200
@@ -1177,7 +1177,7 @@
 static int
 arm_linux_watchpoint_addr_within_range (struct target_ops *target,
 					CORE_ADDR addr,
-					CORE_ADDR start, int length)
+					CORE_ADDR start, LONGEST length)
 {
   return start <= addr && start + length - 1 >= addr;
 }
Index: gdb-8.1/gdb/nat/aarch64-linux-hw-point.c
===================================================================
--- gdb-8.1.orig/gdb/nat/aarch64-linux-hw-point.c	2018-05-05 17:58:31.062496750 +0200
+++ gdb-8.1/gdb/nat/aarch64-linux-hw-point.c	2018-05-05 17:59:16.616909382 +0200
@@ -137,7 +137,7 @@
    Return 0 for any non-compliant ADDR and/or LEN; return 1 otherwise.  */
 
 static int
-aarch64_point_is_aligned (int is_watchpoint, CORE_ADDR addr, int len)
+aarch64_point_is_aligned (int is_watchpoint, CORE_ADDR addr, LONGEST len)
 {
   unsigned int alignment = 0;
 
@@ -212,9 +212,9 @@
    an address within the latter. */
 
 static void
-aarch64_align_watchpoint (CORE_ADDR addr, int len, CORE_ADDR *aligned_addr_p,
+aarch64_align_watchpoint (CORE_ADDR addr, LONGEST len, CORE_ADDR *aligned_addr_p,
 			  int *aligned_offset_p, int *aligned_len_p,
-			  CORE_ADDR *next_addr_p, int *next_len_p,
+			  CORE_ADDR *next_addr_p, LONGEST *next_len_p,
 			  CORE_ADDR *next_addr_orig_p)
 {
   int aligned_len;
@@ -611,7 +611,7 @@
 
 static int
 aarch64_handle_unaligned_watchpoint (enum target_hw_bp_type type,
-				     CORE_ADDR addr, int len, int is_insert,
+				     CORE_ADDR addr, LONGEST len, int is_insert,
 				     struct aarch64_debug_reg_state *state)
 {
   CORE_ADDR addr_orig = addr;
@@ -641,12 +641,12 @@
 		      "                                "
 		      "addr_orig: %s\n"
 		      "                                "
-		      "next_addr: %s,    next_len: %d\n"
+		      "next_addr: %s,    next_len: %s\n"
 		      "                           "
 		      "addr_orig_next: %s\n",
 		      is_insert, core_addr_to_string_nz (aligned_addr),
 		      aligned_len, core_addr_to_string_nz (addr_orig),
-		      core_addr_to_string_nz (addr), len,
+		      core_addr_to_string_nz (addr), plongest (len),
 		      core_addr_to_string_nz (addr_orig_next));
 
       addr_orig = addr_orig_next;
@@ -660,7 +660,7 @@
 
 int
 aarch64_handle_watchpoint (enum target_hw_bp_type type, CORE_ADDR addr,
-			   int len, int is_insert,
+			   LONGEST len, int is_insert,
 			   struct aarch64_debug_reg_state *state)
 {
   if (aarch64_point_is_aligned (1 /* is_watchpoint */ , addr, len))
@@ -722,14 +722,14 @@
 void
 aarch64_show_debug_reg_state (struct aarch64_debug_reg_state *state,
 			      const char *func, CORE_ADDR addr,
-			      int len, enum target_hw_bp_type type)
+			      LONGEST len, enum target_hw_bp_type type)
 {
   int i;
 
   debug_printf ("%s", func);
   if (addr || len)
-    debug_printf (" (addr=0x%08lx, len=%d, type=%s)",
-		  (unsigned long) addr, len,
+    debug_printf (" (addr=0x%08lx, len=%s, type=%s)",
+		  (unsigned long) addr, plongest (len),
 		  type == hw_write ? "hw-write-watchpoint"
 		  : (type == hw_read ? "hw-read-watchpoint"
 		     : (type == hw_access ? "hw-access-watchpoint"
Index: gdb-8.1/gdb/nat/aarch64-linux-hw-point.h
===================================================================
--- gdb-8.1.orig/gdb/nat/aarch64-linux-hw-point.h	2018-05-05 17:58:31.062496750 +0200
+++ gdb-8.1/gdb/nat/aarch64-linux-hw-point.h	2018-05-05 17:58:32.450509322 +0200
@@ -176,7 +176,7 @@
 			       int len, int is_insert,
 			       struct aarch64_debug_reg_state *state);
 int aarch64_handle_watchpoint (enum target_hw_bp_type type, CORE_ADDR addr,
-			       int len, int is_insert,
+			       LONGEST len, int is_insert,
 			       struct aarch64_debug_reg_state *state);
 
 void aarch64_linux_set_debug_regs (struct aarch64_debug_reg_state *state,
@@ -184,7 +184,7 @@
 
 void aarch64_show_debug_reg_state (struct aarch64_debug_reg_state *state,
 				   const char *func, CORE_ADDR addr,
-				   int len, enum target_hw_bp_type type);
+				   LONGEST len, enum target_hw_bp_type type);
 
 void aarch64_linux_get_debug_reg_capacity (int tid);
 
Index: gdb-8.1/gdb/ppc-linux-nat.c
===================================================================
--- gdb-8.1.orig/gdb/ppc-linux-nat.c	2018-05-05 17:58:31.063496759 +0200
+++ gdb-8.1/gdb/ppc-linux-nat.c	2018-05-05 17:58:32.450509322 +0200
@@ -1798,11 +1798,11 @@
    CONDITION_VALUE will hold the value which should be put in the
    DVC register.  */
 static void
-calculate_dvc (CORE_ADDR addr, int len, CORE_ADDR data_value,
+calculate_dvc (CORE_ADDR addr, LONGEST len, CORE_ADDR data_value,
 	       uint32_t *condition_mode, uint64_t *condition_value)
 {
-  int i, num_byte_enable, align_offset, num_bytes_off_dvc,
-      rightmost_enabled_byte;
+  LONGEST i, num_byte_enable;
+  int align_offset, num_bytes_off_dvc, rightmost_enabled_byte;
   CORE_ADDR addr_end_data, addr_end_dvc;
 
   /* The DVC register compares bytes within fixed-length windows which
@@ -1889,7 +1889,7 @@
    of the constant.  */
 static int
 check_condition (CORE_ADDR watch_addr, struct expression *cond,
-		 CORE_ADDR *data_value, int *len)
+		 CORE_ADDR *data_value, LONGEST *len)
 {
   int pc = 1, num_accesses_left, num_accesses_right;
   struct value *left_val, *right_val, *left_chain, *right_chain;
@@ -1957,7 +1957,7 @@
    true.  */
 static int
 ppc_linux_can_accel_watchpoint_condition (struct target_ops *self,
-					  CORE_ADDR addr, int len, int rw,
+					  CORE_ADDR addr, LONGEST len, int rw,
 					  struct expression *cond)
 {
   CORE_ADDR data_value;
@@ -1974,7 +1974,7 @@
 
 static void
 create_watchpoint_request (struct ppc_hw_breakpoint *p, CORE_ADDR addr,
-			   int len, enum target_hw_bp_type type,
+			   LONGEST len, enum target_hw_bp_type type,
 			   struct expression *cond, int insert)
 {
   if (len == 1
@@ -2240,7 +2240,7 @@
 static int
 ppc_linux_watchpoint_addr_within_range (struct target_ops *target,
 					CORE_ADDR addr,
-					CORE_ADDR start, int length)
+					CORE_ADDR start, LONGEST length)
 {
   int mask;
 
Index: gdb-8.1/gdb/procfs.c
===================================================================
--- gdb-8.1.orig/gdb/procfs.c	2018-05-05 17:58:31.064496768 +0200
+++ gdb-8.1/gdb/procfs.c	2018-05-05 17:58:32.451509331 +0200
@@ -1563,7 +1563,7 @@
 }
 
 static int
-proc_set_watchpoint (procinfo *pi, CORE_ADDR addr, int len, int wflags)
+proc_set_watchpoint (procinfo *pi, CORE_ADDR addr, LONGEST len, int wflags)
 {
   struct {
     procfs_ctl_t cmd;
@@ -3250,7 +3250,7 @@
 /* Insert a watchpoint.  */
 
 static int
-procfs_set_watchpoint (ptid_t ptid, CORE_ADDR addr, int len, int rwflag,
+procfs_set_watchpoint (ptid_t ptid, CORE_ADDR addr, LONGEST len, int rwflag,
 		       int after)
 {
   int       pflags = 0;
Index: gdb-8.1/gdb/remote.c
===================================================================
--- gdb-8.1.orig/gdb/remote.c	2018-05-05 17:58:31.066496786 +0200
+++ gdb-8.1/gdb/remote.c	2018-05-05 17:58:32.452509340 +0200
@@ -9897,7 +9897,7 @@
   p = strchr (rs->buf, '\0');
   addr = remote_address_masked (addr);
   p += hexnumstr (p, (ULONGEST) addr);
-  xsnprintf (p, endbuf - p, ",%x", len);
+  xsnprintf (p, endbuf - p, ",%s", phex_nz (len, sizeof (len)));
 
   putpkt (rs->buf);
   getpkt (&rs->buf, &rs->buf_size, 0);
@@ -9917,7 +9917,7 @@
 
 static int
 remote_watchpoint_addr_within_range (struct target_ops *target, CORE_ADDR addr,
-				     CORE_ADDR start, int length)
+				     CORE_ADDR start, LONGEST length)
 {
   CORE_ADDR diff = remote_address_masked (addr - start);
 
@@ -9946,7 +9946,7 @@
   p = strchr (rs->buf, '\0');
   addr = remote_address_masked (addr);
   p += hexnumstr (p, (ULONGEST) addr);
-  xsnprintf (p, endbuf - p, ",%x", len);
+  xsnprintf (p, endbuf - p, ",%s", phex_nz (len, sizeof (len)));
   putpkt (rs->buf);
   getpkt (&rs->buf, &rs->buf_size, 0);
 
Index: gdb-8.1/gdb/target-delegates.c
===================================================================
--- gdb-8.1.orig/gdb/target-delegates.c	2018-05-05 17:58:25.321444747 +0200
+++ gdb-8.1/gdb/target-delegates.c	2018-05-05 17:58:32.453509349 +0200
@@ -733,14 +733,14 @@
 }
 
 static int
-delegate_watchpoint_addr_within_range (struct target_ops *self, CORE_ADDR arg1, CORE_ADDR arg2, int arg3)
+delegate_watchpoint_addr_within_range (struct target_ops *self, CORE_ADDR arg1, CORE_ADDR arg2, LONGEST arg3)
 {
   self = self->beneath;
   return self->to_watchpoint_addr_within_range (self, arg1, arg2, arg3);
 }
 
 static int
-debug_watchpoint_addr_within_range (struct target_ops *self, CORE_ADDR arg1, CORE_ADDR arg2, int arg3)
+debug_watchpoint_addr_within_range (struct target_ops *self, CORE_ADDR arg1, CORE_ADDR arg2, LONGEST arg3)
 {
   int result;
   fprintf_unfiltered (gdb_stdlog, "-> %s->to_watchpoint_addr_within_range (...)\n", debug_target.to_shortname);
@@ -752,7 +752,7 @@
   fputs_unfiltered (", ", gdb_stdlog);
   target_debug_print_CORE_ADDR (arg2);
   fputs_unfiltered (", ", gdb_stdlog);
-  target_debug_print_int (arg3);
+  target_debug_print_LONGEST (arg3);
   fputs_unfiltered (") = ", gdb_stdlog);
   target_debug_print_int (result);
   fputs_unfiltered ("\n", gdb_stdlog);
@@ -785,20 +785,20 @@
 }
 
 static int
-delegate_can_accel_watchpoint_condition (struct target_ops *self, CORE_ADDR arg1, int arg2, int arg3, struct expression *arg4)
+delegate_can_accel_watchpoint_condition (struct target_ops *self, CORE_ADDR arg1, LONGEST arg2, int arg3, struct expression *arg4)
 {
   self = self->beneath;
   return self->to_can_accel_watchpoint_condition (self, arg1, arg2, arg3, arg4);
 }
 
 static int
-tdefault_can_accel_watchpoint_condition (struct target_ops *self, CORE_ADDR arg1, int arg2, int arg3, struct expression *arg4)
+tdefault_can_accel_watchpoint_condition (struct target_ops *self, CORE_ADDR arg1, LONGEST arg2, int arg3, struct expression *arg4)
 {
   return 0;
 }
 
 static int
-debug_can_accel_watchpoint_condition (struct target_ops *self, CORE_ADDR arg1, int arg2, int arg3, struct expression *arg4)
+debug_can_accel_watchpoint_condition (struct target_ops *self, CORE_ADDR arg1, LONGEST arg2, int arg3, struct expression *arg4)
 {
   int result;
   fprintf_unfiltered (gdb_stdlog, "-> %s->to_can_accel_watchpoint_condition (...)\n", debug_target.to_shortname);
@@ -808,7 +808,7 @@
   fputs_unfiltered (", ", gdb_stdlog);
   target_debug_print_CORE_ADDR (arg1);
   fputs_unfiltered (", ", gdb_stdlog);
-  target_debug_print_int (arg2);
+  target_debug_print_LONGEST (arg2);
   fputs_unfiltered (", ", gdb_stdlog);
   target_debug_print_int (arg3);
   fputs_unfiltered (", ", gdb_stdlog);
Index: gdb-8.1/gdb/target.c
===================================================================
--- gdb-8.1.orig/gdb/target.c	2018-05-05 17:58:31.068496804 +0200
+++ gdb-8.1/gdb/target.c	2018-05-05 17:58:32.453509349 +0200
@@ -53,7 +53,7 @@
 static void default_terminal_info (struct target_ops *, const char *, int);
 
 static int default_watchpoint_addr_within_range (struct target_ops *,
-						 CORE_ADDR, CORE_ADDR, int);
+						 CORE_ADDR, CORE_ADDR, LONGEST);
 
 static int default_region_ok_for_hw_watchpoint (struct target_ops *,
 						CORE_ADDR, LONGEST);
@@ -3120,7 +3120,7 @@
 static int
 default_watchpoint_addr_within_range (struct target_ops *target,
 				      CORE_ADDR addr,
-				      CORE_ADDR start, int length)
+				      CORE_ADDR start, LONGEST length)
 {
   return addr >= start && addr < start + length;
 }
Index: gdb-8.1/gdb/target.h
===================================================================
--- gdb-8.1.orig/gdb/target.h	2018-05-05 17:58:31.068496804 +0200
+++ gdb-8.1/gdb/target.h	2018-05-05 17:58:32.454509358 +0200
@@ -535,7 +535,7 @@
     int (*to_stopped_data_address) (struct target_ops *, CORE_ADDR *)
       TARGET_DEFAULT_RETURN (0);
     int (*to_watchpoint_addr_within_range) (struct target_ops *,
-					    CORE_ADDR, CORE_ADDR, int)
+					    CORE_ADDR, CORE_ADDR, LONGEST)
       TARGET_DEFAULT_FUNC (default_watchpoint_addr_within_range);
 
     /* Documentation of this routine is provided with the corresponding
@@ -545,7 +545,7 @@
       TARGET_DEFAULT_FUNC (default_region_ok_for_hw_watchpoint);
 
     int (*to_can_accel_watchpoint_condition) (struct target_ops *,
-					      CORE_ADDR, int, int,
+					      CORE_ADDR, LONGEST, int,
 					      struct expression *)
       TARGET_DEFAULT_RETURN (0);
     int (*to_masked_watch_num_registers) (struct target_ops *,
