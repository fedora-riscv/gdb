http://sourceware.org/ml/gdb/2010-01/msg00017.html

revert:
http://sourceware.org/ml/gdb-cvs/2009-12/msg00104.html
http://sourceware.org/ml/gdb-cvs/2009-12/msg00103.html

Leftover testcase would severely hang the testsuite on timeouts.

--- ./gdb/testsuite/gdb.mi/mi-var-cmd.exp	2009-12-21 14:21:43.000000000 +0100
+++ ./gdb/testsuite/gdb.mi/mi-var-cmd.exp	2010-01-01 19:47:13.000000000 +0100
@@ -577,8 +577,6 @@ proc set_frozen {varobjs flag} {
 mi_prepare_inline_tests $srcfile
 mi_run_inline_test frozen
 
-mi_run_inline_test bitfield
-
 # Since the inline test framework does not really work with
 # function calls, first to inline tests and then do the reminder
 # manually.
--- ./gdb/testsuite/gdb.mi/var-cmd.c	2009-12-21 14:21:43.000000000 +0100
+++ ./gdb/testsuite/gdb.mi/var-cmd.c	2010-01-01 19:47:13.000000000 +0100
@@ -468,40 +468,6 @@ void do_at_tests ()
   /*: END: floating :*/
 }
 
-/* Some header appear to define uint already, so apply some
-   uglification.  Note that without uglification, the compile
-   does not fail, rather, we don't test what we want because
-   something else calls check_typedef on 'uint' already.  */
-typedef unsigned int uint_for_mi_testing;
-
-struct Data {
-  int alloc;
-  uint_for_mi_testing sharable : 4;
-};
-
-/* Accessing a value of a bitfield whose type is a typed used to
-   result in division by zero.  See:
-
-         http://sourceware.org/bugzilla/show_bug.cgi?id=10884
-
-   This tests for this bug.  */
-
-void do_bitfield_tests ()
-{
-  /*: BEGIN: bitfield :*/
-  struct Data d = {0, 3};
-  /*:
-    mi_create_varobj V d "create varobj for Data"
-    mi_list_varobj_children "V" {
-        {"V.alloc" "alloc" "0" "int"}
-        {"V.sharable" "sharable" "0" "unsigned int"}
-    } "list children of Data"
-    mi_check_varobj_value V.sharable 3 "access bitfield"
-    :*/
-  return;
-  /*: END: bitfield :*/  
-}
-
 int
 main (int argc, char *argv [])
 {
@@ -511,7 +477,6 @@ main (int argc, char *argv [])
   do_special_tests ();
   do_frozen_tests ();
   do_at_tests ();
-  do_bitfield_tests ();
   exit (0);
 }
 
--- ./gdb/value.c	2010-01-01 19:46:58.000000000 +0100
+++ ./gdb/value.c	2010-01-01 19:47:13.000000000 +0100
@@ -1960,7 +1960,6 @@ value_primitive_field (struct value *arg
 
   CHECK_TYPEDEF (arg_type);
   type = TYPE_FIELD_TYPE (arg_type, fieldno);
-  type = check_typedef (type);
 
   /* Handle packed fields */
 
