https://bugzilla.redhat.com/show_bug.cgi?id=620930

http://sourceware.org/ml/gdb-cvs/2010-08/msg00031.html

### src/gdb/ChangeLog	2010/08/06 19:45:58	1.12064
### src/gdb/ChangeLog	2010/08/07 15:00:36	1.12065
## -1,3 +1,22 @@
+2010-08-07  Jan Kratochvil  <jan.kratochvil@redhat.com>
+
+	* defs.h (make_cleanup_restore_uinteger, make_cleanup_restore_ui_file)
+	(make_cleanup_restore_page_info)
+	(set_batch_flag_and_make_cleanup_restore_page_info): New declarations.
+	* gdbcmd.h (execute_command_to_string): New declaration.
+	* python/python.c (struct restore_ui_file_closure, restore_ui_file)
+	(make_cleanup_restore_ui_file): Move to utils.c
+	(execute_gdb_command) <to_string>: Move ...
+	* top.c (execute_command_to_string): ... here.  Call
+	set_batch_flag_and_make_cleanup_restore_page_info.
+	* utils.c (make_cleanup_restore_integer): New source file blank line.
+	(make_cleanup_restore_uinteger): New.
+	(struct restore_ui_file_closure, do_restore_ui_file)
+	(make_cleanup_restore_ui_file): Move here from python/python.c.
+	(init_page_info) <batch_flag>
+	(do_restore_page_info_cleanup, make_cleanup_restore_page_info)
+	(set_batch_flag_and_make_cleanup_restore_page_info): New.
+
 2010-08-06  Maciej W. Rozycki  <macro@codesourcery.com>
 
 	* thread.c (add_thread_silent): Use null_ptid instead of
### src/gdb/testsuite/ChangeLog	2010/08/02 23:41:18	1.2405
### src/gdb/testsuite/ChangeLog	2010/08/07 15:00:38	1.2406
## -1,3 +1,10 @@
+2010-08-07  Jan Kratochvil  <jan.kratochvil@redhat.com>
+
+	* gdb.python/python.exp (show height, set height 10)
+	(verify pagination beforehand, verify pagination beforehand: q)
+	(gdb.execute does not page, verify pagination afterwards)
+	(verify pagination afterwards: q): New.
+
 2010-08-02  Doug Evans  <dje@google.com>
 
 	* gdb.cp/namespace.exp: When "print ::cOtherFileClassVar" fails
### src/gdb/doc/ChangeLog	2010/07/31 15:34:41	1.1093
### src/gdb/doc/ChangeLog	2010/08/07 15:00:38	1.1094
## -1,3 +1,9 @@
+2010-08-07  Jan Kratochvil  <jan.kratochvil@redhat.com>
+	    Eli Zaretskii <eliz@gnu.org>
+
+	* gdb.texinfo (Mode Options) <-batch>
+	(Basic Python) <gdb.execute>: Describe setting width and height.
+
 2010-07-31  Paul Pluzhnikov  <ppluzhnikov@google.com>
 
 	* gdb.texinfo (Threads): Document 'debug libthread-db'.
Index: gdb-7.1.90.20100806/gdb/defs.h
===================================================================
--- gdb-7.1.90.20100806.orig/gdb/defs.h	2010-08-07 17:18:27.000000000 +0200
+++ gdb-7.1.90.20100806/gdb/defs.h	2010-08-07 17:18:31.000000000 +0200
@@ -351,6 +351,10 @@ struct obstack;
 extern struct cleanup *make_cleanup_obstack_free (struct obstack *obstack);
 
 extern struct cleanup *make_cleanup_restore_integer (int *variable);
+extern struct cleanup *make_cleanup_restore_uinteger (unsigned int *variable);
+
+extern struct cleanup *
+  make_cleanup_restore_ui_file (struct ui_file **variable);
 
 extern struct cleanup *make_final_cleanup (make_cleanup_ftype *, void *);
 
@@ -383,6 +387,10 @@ extern int yquery (const char *, ...) AT
 
 extern void init_page_info (void);
 
+extern struct cleanup *make_cleanup_restore_page_info (void);
+extern struct cleanup *
+  set_batch_flag_and_make_cleanup_restore_page_info (void);
+
 extern char *gdb_realpath (const char *);
 extern char *xfullpath (const char *);
 
Index: gdb-7.1.90.20100806/gdb/gdbcmd.h
===================================================================
--- gdb-7.1.90.20100806.orig/gdb/gdbcmd.h	2010-08-07 17:18:27.000000000 +0200
+++ gdb-7.1.90.20100806/gdb/gdbcmd.h	2010-08-07 17:18:40.000000000 +0200
@@ -128,6 +128,8 @@ extern void execute_command (char *, int
 
 enum command_control_type execute_control_command (struct command_line *);
 
+extern char *execute_command_to_string (char *p, int from_tty);
+
 extern void print_command_line (struct command_line *, unsigned int,
 				struct ui_file *);
 extern void print_command_lines (struct ui_out *,
Index: gdb-7.1.90.20100806/gdb/top.c
===================================================================
--- gdb-7.1.90.20100806.orig/gdb/top.c	2010-08-07 17:18:27.000000000 +0200
+++ gdb-7.1.90.20100806/gdb/top.c	2010-08-07 17:18:31.000000000 +0200
@@ -458,6 +458,39 @@ execute_command (char *p, int from_tty)
     }
 }
 
+/* Run execute_command for P and FROM_TTY.  Capture its output into the
+   returned string, do not display it to the screen.  BATCH_FLAG will be
+   temporarily set to true.  */
+
+char *
+execute_command_to_string (char *p, int from_tty)
+{
+  struct ui_file *str_file;
+  struct cleanup *cleanup;
+  char *retval;
+
+  /* GDB_STDOUT should be better already restored during these
+     restoration callbacks.  */
+  cleanup = set_batch_flag_and_make_cleanup_restore_page_info ();
+
+  str_file = mem_fileopen ();
+
+  make_cleanup_restore_ui_file (&gdb_stdout);
+  make_cleanup_restore_ui_file (&gdb_stderr);
+  make_cleanup_ui_file_delete (str_file);
+
+  gdb_stdout = str_file;
+  gdb_stderr = str_file;
+
+  execute_command (p, from_tty);
+
+  retval = ui_file_xstrdup (str_file, NULL);
+
+  do_cleanups (cleanup);
+
+  return retval;
+}
+
 /* Read commands from `instream' and execute them
    until end of file or error reading instream.  */
 
Index: gdb-7.1.90.20100806/gdb/utils.c
===================================================================
--- gdb-7.1.90.20100806.orig/gdb/utils.c	2010-08-07 17:18:27.000000000 +0200
+++ gdb-7.1.90.20100806/gdb/utils.c	2010-08-07 17:18:31.000000000 +0200
@@ -339,6 +339,7 @@ restore_integer (void *p)
 
 /* Remember the current value of *VARIABLE and make it restored when the cleanup
    is run.  */
+
 struct cleanup *
 make_cleanup_restore_integer (int *variable)
 {
@@ -352,6 +353,43 @@ make_cleanup_restore_integer (int *varia
 			   xfree);
 }
 
+/* Remember the current value of *VARIABLE and make it restored when the cleanup
+   is run.  */
+
+struct cleanup *
+make_cleanup_restore_uinteger (unsigned int *variable)
+{
+  return make_cleanup_restore_integer ((int *) variable);
+}
+
+struct restore_ui_file_closure
+{
+  struct ui_file **variable;
+  struct ui_file *value;
+};
+
+static void
+do_restore_ui_file (void *p)
+{
+  struct restore_ui_file_closure *closure = p;
+
+  *(closure->variable) = closure->value;
+}
+
+/* Remember the current value of *VARIABLE and make it restored when
+   the cleanup is run.  */
+
+struct cleanup *
+make_cleanup_restore_ui_file (struct ui_file **variable)
+{
+  struct restore_ui_file_closure *c = XNEW (struct restore_ui_file_closure);
+
+  c->variable = variable;
+  c->value = *variable;
+
+  return make_cleanup_dtor (do_restore_ui_file, (void *) c, xfree);
+}
+
 struct cleanup *
 make_my_cleanup2 (struct cleanup **pmy_chain, make_cleanup_ftype *function,
 		  void *arg,  void (*free_arg) (void *))
@@ -2034,6 +2072,12 @@ static int wrap_column;
 void
 init_page_info (void)
 {
+  if (batch_flag)
+    {
+      lines_per_page = UINT_MAX;
+      chars_per_line = UINT_MAX;
+    }
+  else
 #if defined(TUI)
   if (!tui_get_command_dimension (&chars_per_line, &lines_per_page))
 #endif
@@ -2078,6 +2122,44 @@ init_page_info (void)
   set_width ();
 }
 
+/* Helper for make_cleanup_restore_page_info.  */
+
+static void
+do_restore_page_info_cleanup (void *arg)
+{
+  set_screen_size ();
+  set_width ();
+}
+
+/* Provide cleanup for restoring the terminal size.  */
+
+struct cleanup *
+make_cleanup_restore_page_info (void)
+{
+  struct cleanup *back_to;
+
+  back_to = make_cleanup (do_restore_page_info_cleanup, NULL);
+  make_cleanup_restore_uinteger (&lines_per_page);
+  make_cleanup_restore_uinteger (&chars_per_line);
+
+  return back_to;
+}
+
+/* Temporarily set BATCH_FLAG and the associated unlimited terminal size.
+   Provide cleanup for restoring the original state.  */
+
+struct cleanup *
+set_batch_flag_and_make_cleanup_restore_page_info (void)
+{
+  struct cleanup *back_to = make_cleanup_restore_page_info ();
+  
+  make_cleanup_restore_integer (&batch_flag);
+  batch_flag = 1;
+  init_page_info ();
+
+  return back_to;
+}
+
 /* Set the screen size based on LINES_PER_PAGE and CHARS_PER_LINE.  */
 
 static void
Index: gdb-7.1.90.20100806/gdb/doc/gdb.texinfo
===================================================================
--- gdb-7.1.90.20100806.orig/gdb/doc/gdb.texinfo	2010-08-07 17:18:27.000000000 +0200
+++ gdb-7.1.90.20100806/gdb/doc/gdb.texinfo	2010-08-07 17:18:31.000000000 +0200
@@ -1031,9 +1031,9 @@ Run in batch mode.  Exit with status @co
 command files specified with @samp{-x} (and all commands from
 initialization files, if not inhibited with @samp{-n}).  Exit with
 nonzero status if an error occurs in executing the @value{GDBN} commands
-in the command files.  Batch mode also disables pagination;
-@pxref{Screen Size} and acts as if @kbd{set confirm off} were in
-effect (@pxref{Messages/Warnings}).
+in the command files.  Batch mode also disables pagination, sets unlimited
+terminal width and height @pxref{Screen Size}, and acts as if @kbd{set confirm
+off} were in effect (@pxref{Messages/Warnings}).
 
 Batch mode may be useful for running @value{GDBN} as a filter, for
 example to download and run a program on another computer; in order to
@@ -20432,7 +20432,9 @@ By default, any output produced by @var{
 @value{GDBN}'s standard output.  If the @var{to_string} parameter is
 @code{True}, then output will be collected by @code{gdb.execute} and
 returned as a string.  The default is @code{False}, in which case the
-return value is @code{None}.
+return value is @code{None}.  If @var{to_string} is @code{True}, the
+@value{GDBN} virtual terminal will be temporarily set to unlimited width
+and height, and its pagination will be disabled; @pxref{Screen Size}.
 @end defun
 
 @findex gdb.breakpoints
Index: gdb-7.1.90.20100806/gdb/python/python.c
===================================================================
--- gdb-7.1.90.20100806.orig/gdb/python/python.c	2010-08-07 17:18:27.000000000 +0200
+++ gdb-7.1.90.20100806/gdb/python/python.c	2010-08-07 17:18:31.000000000 +0200
@@ -309,33 +309,6 @@ gdbpy_target_wide_charset (PyObject *sel
   return PyUnicode_Decode (cset, strlen (cset), host_charset (), NULL);
 }
 
-struct restore_ui_file_closure
-{
-  struct ui_file **variable;
-  struct ui_file *value;
-};
-
-static void
-restore_ui_file (void *p)
-{
-  struct restore_ui_file_closure *closure = p;
-
-  *(closure->variable) = closure->value;
-}
-
-/* Remember the current value of *VARIABLE and make it restored when
-   the cleanup is run.  */
-struct cleanup *
-make_cleanup_restore_ui_file (struct ui_file **variable)
-{
-  struct restore_ui_file_closure *c = XNEW (struct restore_ui_file_closure);
-
-  c->variable = variable;
-  c->value = *variable;
-
-  return make_cleanup_dtor (restore_ui_file, (void *) c, xfree);
-}
-
 /* A Python function which evaluates a string using the gdb CLI.  */
 
 static PyObject *
@@ -376,27 +349,15 @@ execute_gdb_command (PyObject *self, PyO
       /* Copy the argument text in case the command modifies it.  */
       char *copy = xstrdup (arg);
       struct cleanup *cleanup = make_cleanup (xfree, copy);
-      struct ui_file *str_file = NULL;
 
       if (to_string)
+	result = execute_command_to_string (copy, from_tty);
+      else
 	{
-	  str_file = mem_fileopen ();
-
-	  make_cleanup_restore_ui_file (&gdb_stdout);
-	  make_cleanup_restore_ui_file (&gdb_stderr);
-	  make_cleanup_ui_file_delete (str_file);
-
-	  gdb_stdout = str_file;
-	  gdb_stderr = str_file;
+	  result = NULL;
+	  execute_command (copy, from_tty);
 	}
 
-      execute_command (copy, from_tty);
-
-      if (str_file)
-	result = ui_file_xstrdup (str_file, NULL);
-      else
-	result = NULL;
-
       do_cleanups (cleanup);
     }
   GDB_PY_HANDLE_EXCEPTION (except);
Index: gdb-7.1.90.20100806/gdb/testsuite/gdb.python/python.exp
===================================================================
--- gdb-7.1.90.20100806.orig/gdb/testsuite/gdb.python/python.exp	2010-08-07 17:18:27.000000000 +0200
+++ gdb-7.1.90.20100806/gdb/testsuite/gdb.python/python.exp	2010-08-07 17:18:31.000000000 +0200
@@ -87,3 +87,26 @@ gdb_test "python import itertools; print
 gdb_test_no_output \
     "python x = gdb.execute('printf \"%d\", 23', to_string = True)"
 gdb_test "python print x" "23"
+
+# Test (no) pagination of the executed command.
+gdb_test "show height" {Number of lines gdb thinks are in a page is unlimited\.}
+set lines 10
+gdb_test_no_output "set height $lines"
+
+set test "verify pagination beforehand"
+gdb_test_multiple "python print \"\\n\" * $lines" $test {
+    -re "---Type <return> to continue, or q <return> to quit---$" {
+	pass $test
+    }
+}
+gdb_test "q" "Quit" "verify pagination beforehand: q"
+
+gdb_test "python if gdb.execute('python print \"\\\\n\" * $lines', to_string=True) == \"\\n\" * [expr $lines + 1]: print \"yes\"" "yes" "gdb.execute does not page"
+
+set test "verify pagination afterwards"
+gdb_test_multiple "python print \"\\n\" * $lines" $test {
+    -re "---Type <return> to continue, or q <return> to quit---$" {
+	pass $test
+    }
+}
+gdb_test "q" "Quit" "verify pagination afterwards: q"



https://bugzilla.redhat.com/show_bug.cgi?id=610986
http://sourceware.org/ml/gdb-cvs/2010-08/msg00112.html

### src/gdb/ChangeLog	2010/08/18 22:57:45	1.12097
### src/gdb/ChangeLog	2010/08/19 07:34:26	1.12098
## -1,3 +1,9 @@
+2010-08-19  Jan Kratochvil  <jan.kratochvil@redhat.com>
+
+	* varobj.c (varobj_create): Replace variable old_fi with old_id,
+	initialize it by null_frame_id, wrap its usage by get_frame_id,
+	frame_id_p and frame_find_by_id.
+
 2010-08-18  Tom Tromey  <tromey@redhat.com>
 
 	PR python/11900:
--- src/gdb/varobj.c	2010/08/06 14:17:56	1.159
+++ src/gdb/varobj.c	2010/08/19 07:34:27	1.160
@@ -524,7 +524,7 @@ varobj_create (char *objname,
 {
   struct varobj *var;
   struct frame_info *fi;
-  struct frame_info *old_fi = NULL;
+  struct frame_id old_id = null_frame_id;
   struct block *block;
   struct cleanup *old_chain;
 
@@ -611,7 +611,7 @@
 
 	  var->root->frame = get_frame_id (fi);
 	  var->root->thread_id = pid_to_thread_id (inferior_ptid);
-	  old_fi = get_selected_frame (NULL);
+	  old_id = get_frame_id (get_selected_frame (NULL));
 	  select_frame (fi);	 
 	}
 
@@ -639,8 +639,8 @@
       var->root->rootvar = var;
 
       /* Reset the selected frame */
-      if (old_fi != NULL)
-	select_frame (old_fi);
+      if (frame_id_p (old_id))
+	select_frame (frame_find_by_id (old_id));
     }
 
   /* If the variable object name is null, that means this
