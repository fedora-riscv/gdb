http://sourceware.org/ml/gdb-patches/2016-01/msg00578.html
Subject: [testsuite patch]#2 Fix PR threads/19422 regression + Guile regression [Re: [PATCH+doc] Fix PR threads/19422 - show which thread caused stop]


--cNdxnHkX5QqsyA0e
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline

[ now with the patch]
On Fri, 22 Jan 2016 18:30:20 +0100, Jan Kratochvil wrote:

On Thu, 14 Jan 2016 15:08:40 +0100, Pedro Alves wrote:
> gdb/ChangeLog:
> 2016-01-14  Pedro Alves  <palves@redhat.com>
> 
> 	* NEWS: Mention that GDB now displays the ID and name of the
> 	thread that hit a breakpoint or received a signal.
> 	* break-catch-sig.c (signal_catchpoint_print_it): Use
> 	maybe_print_thread_hit_breakpoint.
> 	* break-catch-syscall.c (print_it_catch_syscall): Likewise.
> 	* break-catch-throw.c (print_it_exception_catchpoint): Likewise.
> 	* breakpoint.c (maybe_print_thread_hit_breakpoint): New function.
> 	(print_it_catch_fork, print_it_catch_vfork, print_it_catch_solib)
> 	(print_it_catch_exec, print_it_ranged_breakpoint)
> 	(print_it_watchpoint, print_it_masked_watchpoint, bkpt_print_it):
> 	Use maybe_print_thread_hit_breakpoint.
> 	* breakpoint.h (maybe_print_thread_hit_breakpoint): Declare.
> 	* gdbthread.h (show_thread_that_caused_stop): Declare.
> 	* infrun.c (print_signal_received_reason): Print which thread
> 	received signal.
> 	* thread.c (show_thread_that_caused_stop): New function.

There was already before a regression if --with-guile (which is default if
Guile is found) was used:

backtrace^M
#0  0x00007ffff6078da0 in __sigprocmask (how=2, set=0x7fffffffcc40, oset=0x0) at ../sysdeps/unix/sysv/linux/x86_64/sigprocmask.c:39^M
#1  0x0000000000966ce9 in _rl_handle_signal (sig=2) at signals.c:228^M
#2  0x0000000000966c05 in rl_signal_handler (sig=2) at signals.c:149^M
#3  <signal handler called>^M
#4  0x00007ffff613afc0 in __poll_nocancel () at ../sysdeps/unix/syscall-template.S:84^M
#5  0x00000000007d9a88 in gdb_wait_for_event (block=1) at event-loop.c:746^M
#6  0x00000000007d8e87 in gdb_do_one_event () at event-loop.c:323^M
#7  0x00000000007d8ed8 in start_event_loop () at event-loop.c:347^M
#8  0x00000000007da9dc in cli_command_loop (data=0x0) at event-top.c:186^M
#9  0x00000000007d0b4c in current_interp_command_loop () at interps.c:317^M
#10 0x00000000007d1f56 in captured_command_loop (data=0x0) at main.c:318^M
#11 0x00000000007cd6c9 in catch_errors (func=0x7d1f3b <captured_command_loop>, func_args=0x0, errstring=0x1167f75 "", mask=RETURN_MASK_ALL) at exceptions.c:240^M
#12 0x00000000007d3514 in captured_main (data=0x7fffffffd600) at main.c:1157^M
#13 0x00000000007cd6c9 in catch_errors (func=0x7d23d5 <captured_main>, func_args=0x7fffffffd600, errstring=0x1167f75 "", mask=RETURN_MASK_ALL) at exceptions.c:240^M
#14 0x00000000007d353d in gdb_main (args=0x7fffffffd600) at main.c:1165^M
#15 0x000000000049ae8c in main (argc=5, argv=0x7fffffffd708) at gdb.c:32^M
(gdb) PASS: gdb.gdb/selftest.exp: backtrace through signal handler
->
backtrace^M
#0  pthread_cond_wait@@GLIBC_2.3.2 () at ../sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S:185^M
#1  0x00007ffff6db32b7 in GC_wait_marker () at pthread_support.c:2036^M
#2  0x00007ffff6da92ba in GC_help_marker (my_mark_no=my_mark_no@entry=4) at mark.c:1168^M
#3  0x00007ffff6db15ef in GC_mark_thread (id=<optimized out>) at pthread_support.c:389^M
#4  0x00007ffff6b8360a in start_thread (arg=0x7ffff337e700) at pthread_create.c:334^M
#5  0x00007ffff5847a4d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:109^M
(gdb) FAIL: gdb.gdb/selftest.exp: backtrace through signal handler


Additionally this patchset added a new regression:

Program received signal SIGINT, Interrupt.^M
0x00007ffff613afc0 in __poll_nocancel () at ../sysdeps/unix/syscall-template.S:84^M
84      T_PSEUDO (SYSCALL_SYMBOL, SYSCALL_NAME, SYSCALL_NARGS)^M
(gdb) PASS: gdb.gdb/selftest.exp: send ^C to child process
->
Thread 1 "xgdb" received signal SIGINT, Interrupt.^M
0x00007ffff583bfdd in poll () at ../sysdeps/unix/syscall-template.S:84^M
84      T_PSEUDO (SYSCALL_SYMBOL, SYSCALL_NAME, SYSCALL_NARGS)^M
(gdb) FAIL: gdb.gdb/selftest.exp: send ^C to child process


OK to check-in the fix for both of these problems?

Tested on x86_64-fedora23-linux-gnu.


Thanks,
Jan

--cNdxnHkX5QqsyA0e
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline; filename=1

gdb/testsuite/ChangeLog
2016-01-22  Jan Kratochvil  <jan.kratochvil@redhat.com>

	Fix testsuite compatibility with Guile.
	* gdb.gdb/selftest.exp (send ^C to child process): Accept also Thread.
	(thread 1): New test for backtrace through signal handler.

diff --git a/gdb/testsuite/gdb.gdb/selftest.exp b/gdb/testsuite/gdb.gdb/selftest.exp
index 4d55cb5..cdcf981 100644
--- a/gdb/testsuite/gdb.gdb/selftest.exp
+++ b/gdb/testsuite/gdb.gdb/selftest.exp
@@ -436,8 +436,9 @@ proc test_with_self { executable } {
     if ![target_info exists gdb,nointerrupts] {
 	set description "send ^C to child process"
 	send_gdb "\003"
+	# "Thread 1" is displayed iff Guile support is linked in.
 	gdb_expect {
-	    -re "Program received signal SIGINT.*$gdb_prompt $" {
+	    -re "(Thread 1 \"xgdb\"|Program) received signal SIGINT.*$gdb_prompt $" {
 		pass "$description"
 	    }
 	    -re ".*$gdb_prompt $" {
@@ -448,6 +449,9 @@ proc test_with_self { executable } {
 	    }
 	}
     }
+
+    # Switch back to the GDB thread if Guile support is linked in.
+    gdb_test "thread 1" {\[Switching to thread 1 .*\].*}
     
     set description "send SIGINT signal to child process"
     gdb_test "signal SIGINT" \

--cNdxnHkX5QqsyA0e--

