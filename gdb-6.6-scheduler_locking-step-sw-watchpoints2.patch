2007-06-25  Jan Kratochvil  <jan.kratochvil@redhat.com>

	* inferior.h (enum resume_step): New definition.
	(resume): Change STEP parameter type to ENUM RESUME_STEP.
	* infrun.c (resume): Likewise.  Extend debug printing of the STEP
	parameter.  Lock the scheduler only for intentional stepping.
	(proceed): Replace the variable ONESTEP with tristate RESUME_STEP.
	Set the third RESUME_STEP state according to BPSTAT_SHOULD_STEP.
	(currently_stepping): Change the return type to ENUM RESUME_STEP.
	Return RESUME_STEP_NEEDED if it is just due to BPSTAT_SHOULD_STEP.
	* linux-nat.c (select_singlestep_lwp_callback): Do not focus on
	the software watchpoint events.
	* linux-nat.h (struct lwp_info): Redeclare STEP as ENUM RESUME_STEP.

2007-10-19  Jan Kratochvil  <jan.kratochvil@redhat.com>

	* infrun.c (proceed): RESUME_STEP initialized for non-stepping.
	RESUME_STEP set according to STEP only at the end of the function.

2008-02-24  Jan Kratochvil  <jan.kratochvil@redhat.com>

	Port to GDB-6.8pre.

Index: gdb-6.8cvs20080219/gdb/inferior.h
===================================================================
--- gdb-6.8cvs20080219.orig/gdb/inferior.h	2008-02-14 23:03:57.000000000 +0100
+++ gdb-6.8cvs20080219/gdb/inferior.h	2008-02-19 14:15:01.000000000 +0100
@@ -179,7 +179,15 @@ extern void reopen_exec_file (void);
 /* The `resume' routine should only be called in special circumstances.
    Normally, use `proceed', which handles a lot of bookkeeping.  */
 
-extern void resume (int, enum target_signal);
+enum resume_step
+  {
+    /* currently_stepping () should return non-zero for non-continue.  */
+    RESUME_STEP_CONTINUE = 0,
+    RESUME_STEP_USER,		/* Stepping is intentional by the user.  */
+    RESUME_STEP_NEEDED		/* Stepping only for software watchpoints.  */
+  };
+
+extern void resume (enum resume_step, enum target_signal);
 
 /* From misc files */
 
Index: gdb-6.8cvs20080219/gdb/infrun.c
===================================================================
--- gdb-6.8cvs20080219.orig/gdb/infrun.c	2008-02-14 23:03:57.000000000 +0100
+++ gdb-6.8cvs20080219/gdb/infrun.c	2008-02-19 14:24:37.000000000 +0100
@@ -74,7 +74,8 @@ static void set_schedlock_func (char *ar
 
 struct execution_control_state;
 
-static int currently_stepping (struct execution_control_state *ecs);
+static enum resume_step currently_stepping (struct execution_control_state
+									  *ecs);
 
 static void xdb_handle_command (char *args, int from_tty);
 
@@ -508,15 +509,18 @@ set_schedlock_func (char *args, int from
    STEP nonzero if we should step (zero to continue instead).
    SIG is the signal to give the inferior (zero for none).  */
 void
-resume (int step, enum target_signal sig)
+resume (enum resume_step step, enum target_signal sig)
 {
   int should_resume = 1;
   struct cleanup *old_cleanups = make_cleanup (resume_cleanups, 0);
   QUIT;
 
   if (debug_infrun)
-    fprintf_unfiltered (gdb_stdlog, "infrun: resume (step=%d, signal=%d)\n",
-			step, sig);
+    fprintf_unfiltered (gdb_stdlog, "infrun: resume (step=%s, signal=%d)\n",
+			(step == RESUME_STEP_CONTINUE ? "RESUME_STEP_CONTINUE"
+			: (step == RESUME_STEP_USER ? "RESUME_STEP_USER"
+			                            : "RESUME_STEP_NEEDED")),
+			sig);
 
   /* FIXME: calling breakpoint_here_p (read_pc ()) three times! */
 
@@ -632,9 +636,10 @@ a command like `return' or `jump' to con
 	  resume_ptid = inferior_ptid;
 	}
 
-      if ((scheduler_mode == schedlock_on)
+      if (scheduler_mode == schedlock_on
 	  || (scheduler_mode == schedlock_step
-	      && (step || singlestep_breakpoints_inserted_p)))
+	      && (step == RESUME_STEP_USER
+		  || singlestep_breakpoints_inserted_p)))
 	{
 	  /* User-settable 'scheduler' mode requires solo thread resume. */
 	  resume_ptid = inferior_ptid;
@@ -742,7 +747,7 @@ static CORE_ADDR prev_pc;
 void
 proceed (CORE_ADDR addr, enum target_signal siggnal, int step)
 {
-  int oneproc = 0;
+  enum resume_step resume_step = RESUME_STEP_CONTINUE;
 
   if (step > 0)
     step_start_function = find_pc_function (read_pc ());
@@ -756,13 +761,13 @@ proceed (CORE_ADDR addr, enum target_sig
 	   step one instruction before inserting breakpoints so that
 	   we do not stop right away (and report a second hit at this
 	   breakpoint).  */
-	oneproc = 1;
+	resume_step = RESUME_STEP_USER;
       else if (gdbarch_single_step_through_delay_p (current_gdbarch)
               && gdbarch_single_step_through_delay (current_gdbarch,
                                                     get_current_frame ()))
 	/* We stepped onto an instruction that needs to be stepped
 	   again before re-inserting the breakpoint, do so.  */
-	oneproc = 1;
+	resume_step = RESUME_STEP_USER;
     }
   else
     {
@@ -786,9 +791,9 @@ proceed (CORE_ADDR addr, enum target_sig
      that reported the most recent event.  If a step-over is required
      it returns TRUE and sets the current thread to the old thread. */
   if (prepare_to_proceed (step))
-    oneproc = 1;
+    resume_step = RESUME_STEP_USER;
 
-  if (oneproc)
+  if (resume_step == RESUME_STEP_USER)
     /* We will get a trace trap after one instruction.
        Continue it automatically and insert breakpoints then.  */
     stepping_over_breakpoint = 1;
@@ -832,8 +837,13 @@ proceed (CORE_ADDR addr, enum target_sig
      updated correctly when the inferior is stopped.  */
   prev_pc = read_pc ();
 
+  if (step)
+    resume_step = RESUME_STEP_USER;
+  if (resume_step == RESUME_STEP_CONTINUE && bpstat_should_step ())
+    resume_step = RESUME_STEP_NEEDED;
+
   /* Resume inferior.  */
-  resume (oneproc || step || bpstat_should_step (), stop_signal);
+  resume (resume_step, stop_signal);
 
   /* Wait for it to stop (if not standalone)
      and in any case decode why it stopped, and act accordingly.  */
@@ -2723,14 +2733,21 @@ process_event_stop_test:
 
 /* Are we in the middle of stepping?  */
 
-static int
+static enum resume_step
 currently_stepping (struct execution_control_state *ecs)
 {
-  return ((!ecs->handling_longjmp
-	   && ((step_range_end && step_resume_breakpoint == NULL)
-	       || stepping_over_breakpoint))
-	  || ecs->stepping_through_solib_after_catch
-	  || bpstat_should_step ());
+  if (!ecs->handling_longjmp
+      && ((step_range_end && step_resume_breakpoint == NULL)
+	  || stepping_over_breakpoint))
+    return RESUME_STEP_USER;
+
+  if (ecs->stepping_through_solib_after_catch)
+    return RESUME_STEP_USER;
+
+  if (bpstat_should_step ())
+    return RESUME_STEP_NEEDED;
+
+  return RESUME_STEP_CONTINUE;
 }
 
 /* Subroutine call with source code we should not step over.  Do step
Index: gdb-6.8cvs20080219/gdb/linux-nat.c
===================================================================
--- gdb-6.8cvs20080219.orig/gdb/linux-nat.c	2008-02-14 23:03:57.000000000 +0100
+++ gdb-6.8cvs20080219/gdb/linux-nat.c	2008-02-19 14:15:01.000000000 +0100
@@ -1751,7 +1751,10 @@ count_events_callback (struct lwp_info *
 static int
 select_singlestep_lwp_callback (struct lwp_info *lp, void *data)
 {
-  if (lp->step && lp->status != 0)
+  /* We do not focus on software watchpoints as we would not catch
+     STEPPING_PAST_SINGLESTEP_BREAKPOINT breakpoints in some other thread
+     as they would remain pending due to `Push back breakpoint for %s'.  */
+  if (lp->step == RESUME_STEP_USER && lp->status != 0)
     return 1;
   else
     return 0;
Index: gdb-6.8cvs20080219/gdb/linux-nat.h
===================================================================
--- gdb-6.8cvs20080219.orig/gdb/linux-nat.h	2008-02-14 23:03:58.000000000 +0100
+++ gdb-6.8cvs20080219/gdb/linux-nat.h	2008-02-19 14:15:01.000000000 +0100
@@ -55,8 +55,8 @@ struct lwp_info
   /* If non-zero, a pending wait status.  */
   int status;
 
-  /* Non-zero if we were stepping this LWP.  */
-  int step;
+  /* The kind of stepping of this LWP.  */
+  enum resume_step step;
 
   /* Non-zero si_signo if this LWP stopped with a trap.  si_addr may
      be the address of a hardware watchpoint.  */
