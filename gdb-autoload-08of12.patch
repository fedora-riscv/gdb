[patch#4 2/8] Code cleanup: new path to VEC in utils.c
http://sourceware.org/ml/gdb-patches/2012-04/msg00086.html
http://sourceware.org/ml/gdb-cvs/2012-04/msg00111.html
 - reduced for the backport

### src/gdb/ChangeLog	2012/04/17 15:45:05	1.14110
### src/gdb/ChangeLog	2012/04/17 15:47:08	1.14111
## -1,6 +1,34 @@
 2012-04-17  Jan Kratochvil  <jan.kratochvil@redhat.com>
 
 	Code cleanup.
+	* charset.c (find_charset_names): Remove variables ix and elt.
+	Use free_char_ptr_vec.
+	* elfread.c (build_id_to_debug_filename): New variables debugdir_vec,
+	back_to and ix.  Use dirnames_to_char_ptr_vec.  Remove variable
+	debugdir_end.  New variable debugdir_len.
+	* gdb_vecs.h (free_char_ptr_vec, make_cleanup_free_char_ptr_vec)
+	(dirnames_to_char_ptr_vec_append, dirnames_to_char_ptr_vec): New
+	declarations.
+	* progspace.c (clear_program_space_solib_cache): Remove variables ix
+	and elt.  Use free_char_ptr_vec.
+	* source.c (add_path): Remove variables argv, arg and argv_index.
+	New variables dir_vec, back_to, ix and name.
+	Use dirnames_to_char_ptr_vec_append.  Use freeargv instead of
+	make_cleanup_freeargv.  Remove variable separator.  Simplify the code
+	no longer expecting DIRNAME_SEPARATOR.
+	(openp): Remove variable p, p1 and len.  New variables dir_vec,
+	back_to, ix and dir.  Use dirnames_to_char_ptr_vec.  Simplify the code
+	no longer expecting DIRNAME_SEPARATOR.
+	* symfile.c (find_separate_debug_file): New variables debugdir_vec,
+	back_to and ix.  Use dirnames_to_char_ptr_vec.  Remove variable
+	debugdir_end.
+	* utils.c (free_char_ptr_vec, do_free_char_ptr_vec)
+	(make_cleanup_free_char_ptr_vec, dirnames_to_char_ptr_vec_append)
+	(dirnames_to_char_ptr_vec): New functions.
+
+2012-04-17  Jan Kratochvil  <jan.kratochvil@redhat.com>
+
+	Code cleanup.
 	* source.c (add_path): Remove always true conditional 'p == 0' and
 	unindent its code block.
 
Index: gdb-7.4.50.20120120/gdb/gdb_vecs.h
===================================================================
--- gdb-7.4.50.20120120.orig/gdb/gdb_vecs.h	2012-04-18 00:40:12.067086016 +0200
+++ gdb-7.4.50.20120120/gdb/gdb_vecs.h	2012-04-18 00:40:23.474056993 +0200
@@ -25,4 +25,16 @@
 
 DEF_VEC_P (char_ptr);
 
+/* From utils.c: */
+
+extern void free_char_ptr_vec (VEC (char_ptr) *char_ptr_vec);
+
+extern struct cleanup *
+  make_cleanup_free_char_ptr_vec (VEC (char_ptr) *char_ptr_vec);
+
+extern void dirnames_to_char_ptr_vec_append (VEC (char_ptr) **vecp,
+					     const char *dirnames);
+
+extern VEC (char_ptr) *dirnames_to_char_ptr_vec (const char *dirnames);
+
 #endif /* GDB_VECS_H */
Index: gdb-7.4.50.20120120/gdb/utils.c
===================================================================
--- gdb-7.4.50.20120120.orig/gdb/utils.c	2012-04-18 00:40:12.068086013 +0200
+++ gdb-7.4.50.20120120/gdb/utils.c	2012-04-18 00:40:49.862989855 +0200
@@ -29,6 +29,7 @@
 #ifdef HAVE_SYS_RESOURCE_H
 #include <sys/resource.h>
 #endif /* HAVE_SYS_RESOURCE_H */
+#include "gdb_vecs.h"
 
 #ifdef TUI
 #include "tui/tui.h"		/* For tui_get_command_dimension.   */
@@ -3835,6 +3836,95 @@ producer_is_gcc_ge_4 (const char *produc
   return minor;
 }
 
+/* Call xfree for each element of CHAR_PTR_VEC and final VEC_free for
+   CHAR_PTR_VEC itself.
+
+   You must not modify CHAR_PTR_VEC after it got registered with this function
+   by make_cleanup as the CHAR_PTR_VEC base address may change on its updates.
+   Contrary to VEC_free this function does not (cannot) clear the pointer.  */
+
+void
+free_char_ptr_vec (VEC (char_ptr) *char_ptr_vec)
+{
+  int ix;
+  char *name;
+
+  for (ix = 0; VEC_iterate (char_ptr, char_ptr_vec, ix, name); ++ix)
+    xfree (name);
+  VEC_free (char_ptr, char_ptr_vec);
+}
+
+/* Helper for make_cleanup_free_char_ptr_vec.  */
+
+static void
+do_free_char_ptr_vec (void *arg)
+{
+  VEC (char_ptr) *char_ptr_vec = arg;
+
+  free_char_ptr_vec (char_ptr_vec);
+}
+
+/* Make cleanup handler calling xfree for each element of CHAR_PTR_VEC and
+   final VEC_free for CHAR_PTR_VEC itself.
+
+   You must not modify CHAR_PTR_VEC after this cleanup registration as the
+   CHAR_PTR_VEC base address may change on its updates.  Contrary to VEC_free
+   this function does not (cannot) clear the pointer.  */
+
+struct cleanup *
+make_cleanup_free_char_ptr_vec (VEC (char_ptr) *char_ptr_vec)
+{
+  return make_cleanup (do_free_char_ptr_vec, char_ptr_vec);
+}
+
+/* Extended version of dirnames_to_char_ptr_vec - additionally if *VECP is
+   non-NULL the new list elements from DIRNAMES are appended to the existing
+   *VECP list of entries.  *VECP address will be updated by this call.  */
+
+void
+dirnames_to_char_ptr_vec_append (VEC (char_ptr) **vecp, const char *dirnames)
+{
+  do
+    {
+      size_t this_len;
+      char *next_dir, *this_dir;
+
+      next_dir = strchr (dirnames, DIRNAME_SEPARATOR);
+      if (next_dir == NULL)
+	this_len = strlen (dirnames);
+      else
+	{
+	  this_len = next_dir - dirnames;
+	  next_dir++;
+	}
+
+      this_dir = xmalloc (this_len + 1);
+      memcpy (this_dir, dirnames, this_len);
+      this_dir[this_len] = '\0';
+      VEC_safe_push (char_ptr, *vecp, this_dir);
+
+      dirnames = next_dir;
+    }
+  while (dirnames != NULL);
+}
+
+/* Split DIRNAMES by DIRNAME_SEPARATOR delimiter and return a list of all the
+   elements in their original order.  For empty string ("") DIRNAMES return
+   list of one empty string ("") element.
+   
+   You may modify the returned strings.
+   Read free_char_ptr_vec for its cleanup.  */
+
+VEC (char_ptr) *
+dirnames_to_char_ptr_vec (const char *dirnames)
+{
+  VEC (char_ptr) *retval = NULL;
+  
+  dirnames_to_char_ptr_vec_append (&retval, dirnames);
+
+  return retval;
+}
+
 #ifdef HAVE_WAITPID
 
 #ifdef SIGALRM
